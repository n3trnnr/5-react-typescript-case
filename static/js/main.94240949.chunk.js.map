{"version":3,"sources":["utils.ts","data/vehicles/contracts.ts","data/vehicles/mock.ts","data/vehicles/api.ts","components/VehicleTypeSelect.tsx","components/Filter.tsx","components/Table.tsx","App.tsx","index.tsx"],"names":["getRandomElement","array","Math","floor","random","length","round","value","fractionDigits","multiplier","pow","Number","EPSILON","VehicleType","vehicleTypes","sedan","hatchback","roadster","coupe","minivan","vehicleTypeTitles","marks","titles","vehicle","Array","from","map","_","i","start","end","title","type","id","toString","price","VehicleApi","filter","x","search","items","Select","SEP","VehicleTypeSelect","onChange","onValueChange","Filter","filtered","setFiltered","placeholder","onFocus","event","getInputValue","target","TableItem","number","CurrencyLabel","Table","vehicles","key","initialFilter","App","useState","setVehicles","filteredEl","setFilteredEl","useEffect","data","rootElement","document","getElementById","render"],"mappings":"8QAAO,SAASA,EAAoBC,GAChC,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,SAO3C,SAASC,EAAMC,GAA4C,IAA7BC,EAA4B,uDAAX,EAC5CC,EAAaP,KAAKQ,IAAI,GAAIF,GAChC,OAAON,KAAKI,OAAOC,EAAQI,OAAOC,SAAWH,GAAcA,E,MCVnDI,E,kBAAAA,O,iBAAAA,I,yBAAAA,I,uBAAAA,I,iBAAAA,I,sBAAAA,M,KAQL,IAAMC,EAA8B,CACvCD,EAAYE,MACZF,EAAYG,UACZH,EAAYI,SACZJ,EAAYK,MACZL,EAAYM,SAGHC,GAA8C,mBACtDP,EAAYE,MAAQ,kCADkC,cAEtDF,EAAYG,UAAY,8CAF8B,cAGtDH,EAAYI,SAAW,oDAH+B,cAItDJ,EAAYK,MAAQ,4BAJkC,cAKtDL,EAAYM,QAAU,8CALgC,GCbrDE,EAAkB,CACpB,MACA,OACA,OACA,MACA,SACA,SACA,cAGEC,EAAmB,CACrB,KACA,KACA,SACA,SACA,OACA,iBACA,MACA,UACA,UACA,MACA,UACA,OACA,SCvBJ,ID0BgCjB,EC1B1BkB,GD0B0BlB,EC1BA,GD2BrBmB,MAAMC,KAAK,CAACpB,WAASqB,KAAI,SAACC,EAAGC,GAChC,IF3BuBC,EAAeC,EE2BhCC,EAAK,UAAM/B,EAAiBqB,GAAvB,YAAiCrB,EAAiBsB,IACvDU,EAAOhC,EAAiBc,GAC9B,MAAO,CACHmB,GAAIL,EAAEM,WACNH,QACAC,OACAG,MAAO7B,GFjCYuB,EEiCS,IFjCMC,EEiCE,IFhCrC5B,KAAKE,UAAY0B,EAAMD,GAASA,SGA9BO,EAAb,uGAC4D,IAAzCJ,EAAwC,EAAxCA,KAAMD,EAAkC,EAAlCA,MACjB,OAAOR,EAAQc,QAAO,SAAAC,GAAC,OAAa,MAARN,GAAgBM,EAAEN,OAASA,KAAoC,IAA3BM,EAAEP,MAAMQ,OAAOR,UAFvF,K,gCCQMS,EAAmC,CACrC,EAAE,EAAkB,sBACpBC,IAAOC,OAF8B,mBAGlC5B,EAAaY,KAA2B,SAACY,GAAD,MAAO,CAACA,EAAGlB,EAAkBkB,SAG/DK,EAAsD,SAAC,GAG7D,IAFHpC,EAEE,EAFFA,MACAqC,EACE,EADFA,SAEA,OACI,kBAACH,EAAA,EAAD,CACID,MAAOA,EACPjC,MAAgB,MAATA,EAAgBA,GAAU,EACjCsC,cAAe,SAACP,GAAD,OAAYM,GAAgB,IAAPN,EAAW,KAAOA,OCcnDQ,EA9BmB,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAiB3C,OACI,6BACI,2BACIhB,KAAK,OACLiB,YAAY,eACZC,QAAS,aACTN,SAAU,SAACO,GAAD,OAtBA,SAACA,GAEfH,EADAG,EACY,2BAAKJ,GAAN,IAAgBhB,MAAOoB,IAEtB,2BAAKJ,GAAN,IAAgBhB,MAAO,MAkBTqB,CAAcD,EAAME,OAAO9C,UAEpD,kBAAC,EAAD,CAAmBA,MAAOwC,EAASf,KAAMY,SAhB1B,SAACrC,GAEhByC,EADAzC,GAAmB,IAAVA,EACG,2BAAKwC,GAAN,IAAgBf,KAAMzB,IAErB,2BAAKwC,GAAN,IAAgBf,KAAM,a,gBCfvCsB,EAAkC,SAAC,GAAyB,IAAvB/B,EAAsB,EAAtBA,QAASgC,EAAa,EAAbA,OAChD,OACI,4BACI,4BAAKA,GACL,4BAAKhC,EAAQQ,OACb,4BAAKX,EAAkBG,EAAQS,OAC/B,4BACI,kBAACwB,EAAA,EAAD,CAAejD,MAAOgB,EAAQY,MAAO3B,eAAgB,OAUxDiD,EAA0B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtC,OACI,+BACI,+BACI,4BACI,iCACA,gFACA,+DACA,kEAGR,+BACKA,EAAShC,KAAI,SAACY,EAAGV,GAAJ,OACV,kBAAC,EAAD,CAAW+B,IAAKrB,EAAEL,GAAIsB,OAAQ3B,EAAI,EAAGL,QAASe,UCjC5DsB,EAA+B,CACjC7B,MAAO,GACPC,KAAM,MAGK,SAAS6B,IAAO,IAAD,EACMC,mBAAoB,IAD1B,mBACnBJ,EADmB,KACTK,EADS,OAEUD,mBAAwBF,GAFlC,mBAEnBI,EAFmB,KAEPC,EAFO,KAS1B,OALAC,qBAAU,WACN,IAAMC,EAAO/B,EAAWG,OAAOyB,GAC/BD,EAAYI,KACb,CAACH,IAGA,oCACI,kBAAC,EAAD,CAAQjB,SAAUiB,EAAYhB,YAAaiB,IAC3C,kBAAC,EAAD,CAAOP,SAAUA,KClB7B,IAAMU,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,kBAACV,EAAD,MAASO,K","file":"static/js/main.94240949.chunk.js","sourcesContent":["export function getRandomElement<T>(array: T[]): T {\n    return array[Math.floor(Math.random() * array.length)];\n}\n\nexport function getRandomDigit(start: number, end: number): number {\n    return Math.random() * (end - start) + start;\n}\n\nexport function round(value: number, fractionDigits = 2): number {\n    const multiplier = Math.pow(10, fractionDigits);\n    return Math.round((value + Number.EPSILON) * multiplier) / multiplier;\n}\n","export enum VehicleType {\n    sedan,\n    hatchback,\n    roadster,\n    coupe,\n    minivan\n}\n\nexport const vehicleTypes: VehicleType[] = [\n    VehicleType.sedan,\n    VehicleType.hatchback,\n    VehicleType.roadster,\n    VehicleType.coupe,\n    VehicleType.minivan\n];\n\nexport const vehicleTypeTitles: Record<VehicleType, string> = {\n    [VehicleType.sedan]: \"Седан\",\n    [VehicleType.hatchback]: \"Хэтчбэк\",\n    [VehicleType.roadster]: \"Роадстер\",\n    [VehicleType.coupe]: \"Купэ\",\n    [VehicleType.minivan]: \"Минивэн\"\n};\n\nexport interface Vehicle {\n    id: string;\n    type: VehicleType;\n    title: string;\n    price: number;\n}\n\nexport interface VehicleFilter {\n    title: string;\n    type: VehicleType | null;\n}\n","import {getRandomDigit, getRandomElement, round} from \"../../utils\";\nimport {Vehicle, vehicleTypes} from \"./contracts\";\n\nconst marks: string[] = [\n    \"BMW\",\n    \"Lada\",\n    \"Jeep\",\n    \"KIA\",\n    \"Subaru\",\n    \"Toyota\",\n    \"Volkswagen\"\n];\n\nconst titles: string[] = [\n    \"M3\",\n    \"M5\",\n    \"Granta\",\n    \"Kalina\",\n    \"Polo\",\n    \"Grand Cherokee\",\n    \"Rio\",\n    \"Spectra\",\n    \"Impreza\",\n    \"BRZ\",\n    \"Corolla\",\n    \"Golf\",\n    \"Camry\"\n];\n\nexport function generateVehicle(length: number): Vehicle[] {\n    return Array.from({length}).map((_, i) => {\n        const title = `${getRandomElement(marks)} ${getRandomElement(titles)}`;\n        const type = getRandomElement(vehicleTypes);\n        return {\n            id: i.toString(),\n            title,\n            type,\n            price: round(getRandomDigit(10_000, 5_000_000))\n        };\n    });\n}\n","import {generateVehicle} from \"./mock\";\nimport {Vehicle, VehicleFilter} from \"./contracts\";\n\nconst vehicle = generateVehicle(15);\n\nexport class VehicleApi {\n    static search({type, title}: VehicleFilter): Vehicle[] {\n        return vehicle.filter(x => (type == null || x.type === type) && x.title.search(title) !== -1);\n    }\n}\n","import React from \"react\";\r\nimport {\r\n    VehicleType,\r\n    vehicleTypeTitles,\r\n    vehicleTypes\r\n} from \"../data/vehicles/contracts\";\r\nimport { Select } from \"@skbkontur/react-ui\";\r\n\r\nexport interface VehicleTypeSelectProps {\r\n    value: VehicleType | null;\r\n    onChange: (value: VehicleType | null) => void;\r\n}\r\n\r\nconst items: Array<[VehicleType, string]> = [\r\n    [-1 as VehicleType, \"Все\"],\r\n    Select.SEP() as any,\r\n    ...vehicleTypes.map<[VehicleType, string]>((x) => [x, vehicleTypeTitles[x]])\r\n];\r\n\r\nexport const VehicleTypeSelect: React.FC<VehicleTypeSelectProps> = ({\r\n    value,\r\n    onChange\r\n}) => {\r\n    return (\r\n        <Select\r\n            items={items}\r\n            value={value != null ? value : (-1 as VehicleType)}\r\n            onValueChange={(x: any) => onChange(x === -1 ? null : x)}\r\n        />\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport '../styles/Filter.css'\r\nimport { VehicleTypeSelect } from \"./VehicleTypeSelect\";\r\nimport { } from \"./VehicleTypeSelect\";\r\nimport { VehicleFilter, VehicleType } from \"../data/vehicles/contracts\";\r\n\r\ninterface IFilter {\r\n    filtered: VehicleFilter;\r\n    setFiltered: (value: VehicleFilter) => void;\r\n}\r\n\r\nconst Filter: React.FC<IFilter> = ({ filtered, setFiltered }) => {\r\n    const getInputValue = (event: string | null) => {\r\n        if (event) {\r\n            setFiltered({ ...filtered, title: event });\r\n        } else {\r\n            setFiltered({ ...filtered, title: \"\" });\r\n        }\r\n    };\r\n\r\n    const getVehicleType = (value: VehicleType | null) => {\r\n        if (value || value === 0) {\r\n            setFiltered({ ...filtered, type: value });\r\n        } else {\r\n            setFiltered({ ...filtered, type: null });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"text here...\"\r\n                onFocus={() => { }}\r\n                onChange={(event) => getInputValue(event.target.value)}\r\n            />\r\n            <VehicleTypeSelect value={filtered.type} onChange={getVehicleType} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport '../styles/Table.css'\r\nimport { CurrencyLabel } from \"@skbkontur/react-ui\";\r\nimport { Vehicle, vehicleTypeTitles } from \"../data/vehicles/contracts\";\r\n\r\ninterface ITableItem {\r\n    vehicle: Vehicle;\r\n    number: number;\r\n}\r\nconst TableItem: React.FC<ITableItem> = ({ vehicle, number }) => {\r\n    return (\r\n        <tr>\r\n            <td>{number}</td>\r\n            <td>{vehicle.title}</td>\r\n            <td>{vehicleTypeTitles[vehicle.type]}</td>\r\n            <td>\r\n                <CurrencyLabel value={vehicle.price} fractionDigits={2} />\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\ninterface ITable {\r\n    vehicles: Vehicle[];\r\n}\r\n\r\nexport const Table: React.FC<ITable> = ({ vehicles }) => {\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Название</th>\r\n                    <th>Тип ТС</th>\r\n                    <th>Цена, ₽</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {vehicles.map((x, i) => (\r\n                    <TableItem key={x.id} number={i + 1} vehicle={x} />\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Vehicle, VehicleFilter } from \"./data/vehicles/contracts\";\r\nimport { VehicleApi } from \"./data/vehicles/api\";\r\nimport Filter from \"./components/Filter\";\r\nimport { Table } from \"./components/Table\";\r\n\r\nconst initialFilter: VehicleFilter = {\r\n    title: \"\",\r\n    type: null\r\n};\r\n\r\nexport default function App() {\r\n    const [vehicles, setVehicles] = useState<Vehicle[]>([]);\r\n    const [filteredEl, setFilteredEl] = useState<VehicleFilter>(initialFilter);\r\n\r\n    useEffect(() => {\r\n        const data = VehicleApi.search(filteredEl);\r\n        setVehicles(data);\r\n    }, [filteredEl]);\r\n\r\n    return (\r\n        <>\r\n            <Filter filtered={filteredEl} setFiltered={setFilteredEl} />\r\n            <Table vehicles={vehicles} />\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}